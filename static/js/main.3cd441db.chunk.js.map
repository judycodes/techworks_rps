{"version":3,"sources":["PlayerCard.js","App.js","serviceWorker.js","index.js"],"names":["PlayerCard","props","console","log","sign","image","react_default","a","createElement","className","alt","src","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","playGame","setState","playerOne","signs","Math","floor","random","playerTwo","decideWinner","state","src_PlayerCard","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAiCeA,EA1BI,SAACC,GAChBC,QAAQC,IAAIF,GAKZ,IAAIG,EAAOH,EAAMG,KACbC,EAAQ,GAWZ,OARIA,EADQ,SAATD,EAZM,kCAcU,UAATA,EAbA,kCAFG,kCAuBTE,EAAAC,EAAAC,cAAA,OAAKC,UAAY,eACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,OAAOC,IAAKN,MCuCjBO,cA9Db,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAWJI,SAAW,WACTP,EAAKQ,SAAS,CACZC,UAAWT,EAAKU,MAAMC,KAAKC,MAAsB,EAAhBD,KAAKE,WACtCC,UAAWd,EAAKU,MAAMC,KAAKC,MAAsB,EAAhBD,KAAKE,cAf1Bb,EA2BhBe,aAAe,WACb,IAAMN,EAAYT,EAAKgB,MAAMP,UACvBK,EAAYd,EAAKgB,MAAMF,UAE7B,OAAIL,IAAcK,EAAmB,QAEnB,SAAdL,GAAsC,aAAdK,GACT,aAAdL,GAAqD,UAAzBT,EAAKgB,MAAMF,WACzB,UAAdL,GAAkD,SAAzBT,EAAKgB,MAAMF,UAA+B,mBAE3D,oBAnCXd,EAAKU,MAAQ,CAAC,OAAQ,WAAY,SAElCV,EAAKgB,MAAQ,CACXP,UAAU,OACVK,UAAU,YANAd,wEA2CZ,OAEEP,EAAAC,EAAAC,cAAA,OAAKC,UAAY,SACfH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACsB,EAAD,CAAY1B,KAAMY,KAAKa,MAAMP,YAC7BhB,EAAAC,EAAAC,cAACsB,EAAD,CAAY1B,KAAMY,KAAKa,MAAMF,aAG7BrB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UAAUO,KAAKY,gBAChCtB,EAAAC,EAAAC,cAAA,UAAQuB,KAAK,SAASC,QAAShB,KAAKI,UAApC,0BAtDWa,aCSCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3cd441db.chunk.js","sourcesContent":["import React from 'react'\n\n//images of rock, paper, scissor\nconst scissors = \"https://i.imgur.com/pgjyhIZ.png\";\nconst rock = \"https://i.imgur.com/LghSkIw.png\";\nconst paper = \"https://i.imgur.com/2gsdqvR.png\";\n\nconst PlayerCard = (props) => { //props is passing as argument representing rock, paper, or scissors\n    console.log(props)//shows the values of props (key/value) passed into PlayerCard components in App.js\n    //props is an object with key/value pairs in components and being passed around elsewhere\n\n\n    \n    var sign = props.sign\n    var image = \"\"\n    \n    if(sign === \"rock\") {\n        image = rock;\n    } else if(sign === \"paper\") {\n        image = paper;\n    } else {\n        image = scissors;\n    }\n\n    \n    return (\n        <div className = \"player-card\">\n           <img alt=\"sign\" src={image} />\n        </div>\n    )\n}\n\n// {sign} between divs shows value text in game\nexport default PlayerCard;\n\n","import React, { Component } from 'react';\nimport PlayerCard from \"./PlayerCard\";\n\nclass Game extends Component {\n  constructor() {\n    super();\n    this.signs = [\"rock\", \"scissors\", \"paper\"]; //array of static values\n    \n    this.state = {\n      playerOne:\"rock\", //initializing values to string, initial value\n      playerTwo:\"scissors\", //initial value\n\n    }\n    \n  }\n  \nplayGame = () => {\n  this.setState({\n    playerOne: this.signs[Math.floor(Math.random() * 3)],\n    playerTwo: this.signs[Math.floor(Math.random() * 3)],\n  })\n}\n\n//if playerOne sign === playerTwo sign, the game is at a draw\n//if playerOne is rock && playerTwo is scissors, playerOne wins\n//if playerOne is scissors && playerTwo is paper, playerOne wins\n//if playerOne is paper && playerTwo is rock, playerOne wins\n//if playerOne is rock && playerTwo is paper, playerTwo wins\n//if playerOne is scissors && playerTwo is rock, playerTwo wins\n//if playerOne is paper && playerTwo is scissors, playerTwo wins\n\ndecideWinner = () => {\n  const playerOne = this.state.playerOne;\n  const playerTwo = this.state.playerTwo;\n\n  if (playerOne === playerTwo) {return 'Tied!'};\n  \n  if((playerOne === 'rock' && playerTwo === 'scissors') || \n      (playerOne === 'scissors' && this.state.playerTwo === 'paper') || \n      (playerOne === 'paper' && this.state.playerTwo === 'rock')) {return \"Player One Wins!\";}\n\n  else {return \"Player Two Wins!\";}\n  \n}\n\n\n  render() {\n    return ( //PlayerCard is a functional component\n      //sign property being passed into PlayerCard component and {this.state.playerOne/Two} is providing initial values\n      <div className = \"style\">\n        <div>\n        <PlayerCard sign={this.state.playerOne}/>\n        <PlayerCard sign={this.state.playerTwo}/>\n        </div>\n\n        <div>  \n        <div className = \"winner\">{this.decideWinner()}</div>\n        <button type=\"button\" onClick={this.playGame}>Play the Game</button>\n        </div>\n      </div>\n    )\n  }\n}\n\n//this.decideWinner() invoking/firing the method \n//when clicked, this.playGame sets state, rerenders, and fires the this.decideWinner() method\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}